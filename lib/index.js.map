{"version":3,"sources":["../src/index.js"],"names":["getUrl","path","url","URL","e","downloadByHttp","httpConfig","isHttps","protocol","agent","https","http","Promise","resolve","reject","data","Buffer","from","get","href","res","statusCode","on","chunk","concat","toString","downloadByFile","fs","readFile","pathname","err","download","HTTPConfig","ballboy"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAQA,MAAMA,MAAM,GAAIC,IAAD,IAAuB;AACpC,MAAIC,GAAJ;;AACA,MAAI;AACFA,IAAAA,GAAG,GAAG,IAAIC,GAAJ,CAAQF,IAAR,CAAN;AACD,GAFD,CAEE,OAAOG,CAAP,EAAU;AACVF,IAAAA,GAAG,GAAG,wBAAcD,IAAd,CAAN;AACD;;AACD,SAAOC,GAAP;AACD,CARD;;AAUA,MAAMG,cAA0B,GAAG,CAACH,GAAD,EAAMI,UAAN,KAAqB;AACtD,QAAMC,OAAO,GAAGL,GAAG,CAACM,QAAJ,KAAiB,QAAjC;AACA,QAAMC,KAAK,GAAGF,OAAO,GAAGG,cAAH,GAAWC,aAAhC;AACA,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,QAAIC,IAAI,GAAGC,MAAM,CAACC,IAAP,CAAY,EAAZ,CAAX;AACAR,IAAAA,KAAK,CAACS,GAAN,CAAUhB,GAAG,CAACiB,IAAd,EAAoBb,UAApB,EAAiCc,GAAD,IAAS;AACvC,UAAIA,GAAG,CAACC,UAAJ,KAAmB,GAAvB,EAA4B;AAAEP,QAAAA,MAAM,CAAE,uBAAsBM,GAAG,CAACC,UAAW,EAAvC,CAAN;AAAkD;;AAChFD,MAAAA,GAAG,CAACE,EAAJ,CAAO,MAAP,EAAgBC,KAAD,IAAW;AAAER,QAAAA,IAAI,GAAIC,MAAM,CAACQ,MAAP,CAAc,CAACT,IAAD,EAAOC,MAAM,CAACC,IAAP,CAAYM,KAAZ,CAAP,CAAd,CAAR;AAAmD,OAA/E;AACAH,MAAAA,GAAG,CAACE,EAAJ,CAAO,KAAP,EAAc,MAAM;AAAET,QAAAA,OAAO,CAACE,IAAI,CAACU,QAAL,EAAD,CAAP;AAA2B,OAAjD;AACD,KAJD;AAKD,GAPM,CAAP;AAQD,CAXD;;AAaA,MAAMC,cAA0B,GAAG,MAAOxB,GAAP,IAAe;AAChD,SAAO,IAAIU,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCa,gBAAGC,QAAH,CAAY1B,GAAG,CAAC2B,QAAhB,EAA0B,CAACC,GAAD,EAAMf,IAAN,KAAe;AACvC,UAAIe,GAAJ,EAAS;AAAEhB,QAAAA,MAAM,CAACgB,GAAD,CAAN;AAAc;;AACzBjB,MAAAA,OAAO,CAACE,IAAI,CAACU,QAAL,EAAD,CAAP;AACD,KAHD;AAID,GALM,CAAP;AAMD,CAPD;;AASA,MAAMM,QAAoB,GAAG,OAAO7B,GAAP,EAAY8B,UAAZ,KAA2B;AACtD,UAAQ9B,GAAG,CAACM,QAAZ;AACE,SAAK,OAAL;AACA,SAAK,QAAL;AACE,aAAOH,cAAc,CAACH,GAAD,EAAM8B,UAAN,CAArB;;AACF,SAAK,OAAL;AACE,aAAON,cAAc,CAACxB,GAAD,CAArB;AALJ;AAOD,CARD;;AAUO,MAAM+B,OAAgB,GAAIhC,IAAD,IAAU;AACxC,QAAMC,GAAG,GAAGF,MAAM,CAACC,IAAD,CAAlB;AACA,QAAM+B,UAAU,GAAGC,OAAO,CAACD,UAAR,IAAsB,EAAzC;AACA,SAAOD,QAAQ,CAAC7B,GAAD,EAAM8B,UAAN,CAAf;AACD,CAJM;;;eAMQC,O","sourcesContent":["import { pathToFileURL } from 'url';\nimport http from 'http';\nimport https from 'https';\nimport fs from 'fs';\n\ntype Ballboy = {\n  (path: string): Promise<string>;\n  HTTPConfig: {}\n};\ntype Downloader = (url: URL, httpConfig?: {}) => Promise<string>;\n\nconst getUrl = (path: string): URL => {\n  let url;\n  try {\n    url = new URL(path);\n  } catch (e) {\n    url = pathToFileURL(path);\n  }\n  return url;\n};\n\nconst downloadByHttp: Downloader = (url, httpConfig) => {\n  const isHttps = url.protocol === 'https:';\n  const agent = isHttps ? https : http;\n  return new Promise((resolve, reject) => {\n    let data = Buffer.from([]);\n    agent.get(url.href, httpConfig, (res) => {\n      if (res.statusCode !== 200) { reject(`Error! Status code: ${res.statusCode}`); }\n      res.on('data', (chunk) => { data  = Buffer.concat([data, Buffer.from(chunk)]) });\n      res.on('end', () => { resolve(data.toString()); });\n    });\n  });\n};\n\nconst downloadByFile: Downloader = async (url) => {\n  return new Promise((resolve, reject) => {\n    fs.readFile(url.pathname, (err, data) => {\n      if (err) { reject(err); }\n      resolve(data.toString());\n    });\n  });\n};\n\nconst download: Downloader = async (url, HTTPConfig) => {\n  switch (url.protocol) {\n    case 'http:':\n    case 'https:':\n      return downloadByHttp(url, HTTPConfig);\n    case 'file:':\n      return downloadByFile(url);\n  }\n};\n\nexport const ballboy: Ballboy = (path) => {\n  const url = getUrl(path);\n  const HTTPConfig = ballboy.HTTPConfig || {};\n  return download(url, HTTPConfig);\n};\n\nexport default ballboy;\n"],"file":"index.js"}